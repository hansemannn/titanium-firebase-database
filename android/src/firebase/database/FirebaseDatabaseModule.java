/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2018 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 */
package firebase.database;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import com.google.android.gms.common.util.ArrayUtils;
import com.google.firebase.database.ChildEventListener;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;


@Kroll.module(name = "FirebaseDatabase", id = "firebase.database")
public class FirebaseDatabaseModule extends KrollModule {

    @Kroll.constant
    public static final int DATA_EVENT_TYPE_CHILD_ADDED = 0;
    @Kroll.constant
    public static final int DATA_EVENT_TYPE_VALUE = 1;
    FirebaseDatabase database;

    // You can define constants with @Kroll.constant, for example:
    // @Kroll.constant public static final String EXTERNAL_NAME = value;

    public FirebaseDatabaseModule() {
        super();
    }

    @Kroll.onAppCreate
    public static void onAppCreate(TiApplication app) {

    }

    @Kroll.method
    public DatabaseReferenceProxy getReference(@Kroll.argument(optional = true) KrollDict kd) {
        database = FirebaseDatabase.getInstance();
        DatabaseReference dbr;
        if (kd != null) {
            if (kd.containsKeyAndNotNull("path")) {
                String path = kd.getString("path");
                dbr = database.getReference(path);
            } else if (kd.containsKeyAndNotNull("url")) {
                String url = kd.getString("url");
                dbr = database.getReferenceFromUrl(url);
            } else {
                dbr = database.getReference();
            }

            if (kd.containsKeyAndNotNull("observableEvents")) {
                int[] intArray = kd.getIntArray("observableEvents");
                if (ArrayUtils.contains(intArray, DATA_EVENT_TYPE_CHILD_ADDED)) {
                    dbr.addChildEventListener(new ChildEventListener() {

                        @Override
                        public void onChildAdded(@NonNull DataSnapshot snapshot, @Nullable String previousChildName) {
                            KrollDict kd = new KrollDict();
                            kd.put("data", snapshot.toString());
                            fireEvent("add", kd);
                        }

                        @Override
                        public void onChildChanged(@NonNull DataSnapshot snapshot, @Nullable String previousChildName) {
                            KrollDict kd = new KrollDict();
                            kd.put("data", snapshot.toString());
                            fireEvent("change", kd);
                        }

                        @Override
                        public void onChildRemoved(@NonNull DataSnapshot snapshot) {
                            KrollDict kd = new KrollDict();
                            kd.put("data", snapshot.toString());
                            fireEvent("remove", kd);
                        }

                        @Override
                        public void onChildMoved(@NonNull DataSnapshot snapshot, @Nullable String previousChildName) {
                            KrollDict kd = new KrollDict();
                            kd.put("data", snapshot.toString());
                            fireEvent("move", kd);
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                } else if (ArrayUtils.contains(intArray, DATA_EVENT_TYPE_VALUE)) {
                    dbr.addValueEventListener(new ValueEventListener() {

                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            KrollDict kd = new KrollDict();
                            kd.put("data", snapshot.toString());
                            fireEvent("change", kd);
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            }
        } else {
            dbr = database.getReference();
        }
        DatabaseReferenceProxy drp = new DatabaseReferenceProxy(dbr, database);


        return drp;
    }

    @Kroll.getProperty
    public Long getFirebaseServerTimestamp() {
        return System.currentTimeMillis() / 1000L;
    }

}