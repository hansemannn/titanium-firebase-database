/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2017 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 */
package firebase.database;

import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.ValueEventListener;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;

import java.util.HashMap;

@Kroll.proxy(creatableInModule = FirebaseDatabaseModule.class)
public class DatabaseReferenceProxy extends KrollProxy {
    private DatabaseReference databaseReference;

    // Constructor
    public DatabaseReferenceProxy(DatabaseReference dbr) {
        super();
        databaseReference = dbr;

        ValueEventListener postListener = new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot dataSnapshot) {
                KrollDict kd = new KrollDict();
                kd.put("key", dataSnapshot.getKey());
                kd.put("value", dataSnapshot.getValue());
                fireEvent("value", kd);
            }

            @Override
            public void onCancelled(DatabaseError databaseError) {
            }
        };
        databaseReference.addValueEventListener(postListener);
    }

    // Handle creation options
    @Override
    public void handleCreationDict(KrollDict options) {
        super.handleCreationDict(options);
    }

    public DatabaseReference getDatabaseReference() {
        return databaseReference;
    }


    @Kroll.method
    public DatabaseReferenceProxy childByAutoId(KrollDict kd) {
        String path = kd.getString("path");
        databaseReference = databaseReference.child(path).push();
        return this;
    }

    @Kroll.method
    public void setValue(HashMap data) {
        databaseReference.setValue(data);
    }

    @Kroll.method
    public void removeValue() {
        databaseReference.removeValue();
    }

    @Kroll.method
    public void goOnline() {
        databaseReference.getDatabase().goOnline();
    }

    @Kroll.method
    public void goOffline() {
        databaseReference.getDatabase().goOffline();
    }

}
